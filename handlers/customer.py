from keyboards import (main_customer, cancel_button, make_order, get_photo_history, history_choice,
                       remove_order, confirm_order_remove, confirm_delivery_yes_no, need_photo_keyboard)
from utils.routers_for_roles import customer_router, all_role_router
from utils.order_board import board_with_order
from utils.order_container import OrderContainer
from states.oreder_creating_states import OrderCreating
from .all_roles import all_main_menu
from loader import roles_dict, bot_base

from aiogram.types import Message, CallbackQuery
from aiogram import F, html
from aiogram.fsm.context import FSMContext


async def cust_main_menu(msg: Message):
    await msg.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=main_customer)


# ========== –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ==========

# –î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–±—â–∏–π –¥–ª—è —Ä–æ–ª–µ–π "–∑–∞–∫–∞–∑—á–∏–∫–∞" –∏ "–∑–∞–∫–∞–∑—á–∏–∫ + –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"


@all_role_router.message(F.text == '‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑')
@customer_router.message(F.text == '‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑')
async def order_creating(msg: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å"""
    await msg.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å, –æ—Ç–∫—É–¥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –∑–∞–±—Ä–∞—Ç—å:',
                     reply_markup=cancel_button)
    await state.set_state(OrderCreating.departure)


@all_role_router.message(OrderCreating.departure, F.text != '‚õî –û—Ç–º–µ–Ω–∞')
@customer_router.message(OrderCreating.departure, F.text != '‚õî –û—Ç–º–µ–Ω–∞')
async def catch_point_of_departure(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –∞–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ —Ç–æ—á–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏"""
    await state.set_data({'departure': msg.text})
    await msg.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:')
    await state.set_state(OrderCreating.delivery)


@all_role_router.message(OrderCreating.delivery, F.text != '‚õî –û—Ç–º–µ–Ω–∞')
@customer_router.message(OrderCreating.delivery, F.text != '‚õî –û—Ç–º–µ–Ω–∞')
async def catch_point_of_delivery(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥—Ä—É–∑–∞"""
    await state.update_data({'delivery': msg.text})
    await msg.answer('–¢–µ–ø–µ—Ä—å –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ–∑—Ç–∏: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    await state.set_state(OrderCreating.parcel_contents)


@all_role_router.message(OrderCreating.parcel_contents, F.text != '‚õî –û—Ç–º–µ–Ω–∞')
@customer_router.message(OrderCreating.parcel_contents, F.text != '‚õî –û—Ç–º–µ–Ω–∞')
async def catch_parcel_contents(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥—Ä—É–∑–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏"""
    await state.update_data({'parcel_contents': msg.text})
    await msg.answer('–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≥—Ä—É–∑:')
    await state.set_state(OrderCreating.time_to_delivery)


@all_role_router.message(OrderCreating.time_to_delivery, F.text != '‚õî –û—Ç–º–µ–Ω–∞')
@customer_router.message(OrderCreating.time_to_delivery, F.text != '‚õî –û—Ç–º–µ–Ω–∞')
async def catch_time_to_delivery(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ —Ü–µ–Ω—É –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É"""
    await state.update_data({'time_to_delivery': msg.text})
    await msg.answer('–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö, –∫–æ—Ç–æ—Ä–µ –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç–∞–≤—â–∏–∫:')
    await state.set_state(OrderCreating.price)


@all_role_router.message(OrderCreating.price, F.text != '‚õî –û—Ç–º–µ–Ω–∞')
@customer_router.message(OrderCreating.price, F.text != '‚õî –û—Ç–º–µ–Ω–∞')
async def catch_price(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º —Ü–µ–Ω—É –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
    await state.update_data({'price': msg.text})
    await msg.answer(text='–í–∞–º –Ω—É–∂–µ–Ω —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç –ø—Ä–∏ –æ—Ç–≥—Ä—É–∑–∫–µ?', reply_markup=need_photo_keyboard)
    await state.set_state(OrderCreating.need_photo)


@all_role_router.callback_query(OrderCreating.need_photo)
@customer_router.callback_query(OrderCreating.need_photo)
async def catch_need_photo(callback: CallbackQuery, state: FSMContext):
    """–õ–æ–≤–∏–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–∞ —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç"""
    await callback.answer()
    await state.update_data({'need_photo': True if callback.data == 'need_photo_yes' else False})
    await callback.message.answer('–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏/–∏–ª–∏ –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–∞–∫—Ç, '
                                  '–ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è')
    await state.set_state(OrderCreating.contacts)


@all_role_router.message(OrderCreating.contacts, F.text != '‚õî –û—Ç–º–µ–Ω–∞')
@customer_router.message(OrderCreating.contacts, F.text != '‚õî –û—Ç–º–µ–Ω–∞')
async def catch_contacts_and_show_result(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –∫–æ–Ω—Ç–∞–∫—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –≤ –∏—Ç–æ–≥–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å. –î–∞–ª—å—à–µ –∑–∞–∫–∞–∑—á–∏–∫ –ª–∏–±–æ –≤—Å–µ –æ—Ç–º–µ–Ω—è–µ—Ç, –ª–∏–±–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç"""

    order_info = await state.get_data()  # –í—ã–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≤ –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å
    order_info['contacts'] = msg.text  # –ò –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
    await state.update_data({'contacts': msg.text})  # –¢–∞–∫ –∂–µ —Å–æ—Ö—Ä–∞–Ω–∏–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

    msg_text = (f'–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n<b>–ü—É–Ω–∫—Ç –æ—Ç–≥—Ä—É–∑–∫–∏:</b> {order_info["departure"]}\n'
                f'<b>–ü—É–Ω–∫—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order_info["delivery"]}\n'
                f'<b>–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞:</b> {order_info["parcel_contents"]}\n'
                f'<b>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order_info["time_to_delivery"]}\n'
                f'<b>–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É:</b> {order_info["price"]}\n'
                f'<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:</b> {order_info["contacts"]}\n'
                f'<b>–§–æ—Ç–æ–æ—Ç—á–µ—Ç:</b> {"–ù—É–∂–µ–Ω" if order_info["need_photo"] else "–ù–µ –Ω—É–∂–µ–Ω"}')

    await msg.answer(text=msg_text, reply_markup=make_order)
    await state.set_state(OrderCreating.finish)


@all_role_router.callback_query(OrderCreating.finish, F.data.startswith('or_'))
@customer_router.callback_query(OrderCreating.finish, F.data.startswith('or_'))
async def finish_order_creating(callback: CallbackQuery, state: FSMContext):
    """–ó–¥–µ—Å—å –∑–∞–∫–∞–∑—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –¥–æ—Å–∫—É –∑–∞–∫–∞–∑–æ–≤, –ª–∏–±–æ –æ—Ç–º–µ–Ω—è–µ—Ç"""
    await callback.answer()
    if callback.data == 'or_confirm':
        order_info = await state.get_data()
        await board_with_order.add_order(
            customer_id=callback.from_user.id,
            point_of_departure=order_info["departure"],
            point_of_delivery=order_info["delivery"],
            parcel_contents=order_info["parcel_contents"],
            time_delivery=order_info["time_to_delivery"],
            price=order_info["price"],
            contacts=order_info["contacts"],
            need_photo=order_info["need_photo"]
        )
        await callback.message.answer('–ó–∞–∫–∞–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!')

        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏, –Ω–∞–ø—Ä–∞–≤–∏–º —é–∑–µ—Ä–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if callback.from_user.id in roles_dict['customer']:
            await cust_main_menu(msg=callback.message)
        else:
            await all_main_menu(callback.message)
        await state.clear()

    elif callback.data == 'or_unconfirmed':
        if callback.from_user.id in roles_dict['customer']:
            await cust_main_menu(msg=callback.message)
        else:
            await all_main_menu(callback.message)
        await state.clear()


# ========== –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ==========

# –û–±—â–∞—è –¥–ª—è —Ä–æ–ª–µ–π "–∑–∞–∫–∞–∑—á–∏–∫" –∏ "–∑–∞–∫–∞–∑—á–∏–∫+–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
@all_role_router.message(F.text == 'üì¶ –ú–æ–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã')
@customer_router.message(F.text == 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã')
async def view_customer_orders(msg: Message):
    """–ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤"""
    customer_orders = await board_with_order.get_customer_orders(msg.from_user.id)
    if len(customer_orders) > 0:
        for order in customer_orders:
            order_status = order.get_order_status()  # –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –≤–∑—è–ª
            order_id = order.get_order_id()
            await msg.answer(text=order.get_info_for_owner_and_executor(),
                             reply_markup=remove_order(
                                 order_id=order_id, status=order_status
                             ))
    else:
        await msg.answer('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤!')


@all_role_router.callback_query(F.data.startswith('rem_'))
@customer_router.callback_query(F.data.startswith('rem_'))
async def order_removing(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –∞ —Ç–∞–∫ –∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è"""
    if callback.data == 'rem_yes':
        order_id = (await state.get_data())['order_id']
        await board_with_order.remove_order(order_id)
        await callback.message.delete()
        await state.clear()

    elif callback.data == 'rem_no':
        order_id = (await state.get_data())['order_id']
        order = await board_with_order.get_order_by_id(order_id)
        order_status = order.get_order_status()  # –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –≤–∑—è–ª

        await callback.message.edit_text(text=order.get_info_for_owner_and_executor(),
                                         reply_markup=remove_order(
                                             order_id=order_id,
                                             status=order_status
                                         ))
        await state.clear()

    else:
        await state.set_data({'order_id': callback.data.replace('rem_', '')})
        await callback.message.edit_text(text='<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã</b>‚ùì', reply_markup=confirm_order_remove)


@all_role_router.callback_query(F.data.startswith('get_photo_'))
@customer_router.callback_query(F.data.startswith('get_photo_'))
async def get_photo_to_customer(callback: CallbackQuery):
    """–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–∑–∞ —Ñ–æ—Ç–æ, –∑–∞–∫–∞–∑—á–∏–∫ –º–æ–∂–µ—Ç —ç—Ç–æ —Ñ–æ—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç"""
    await callback.answer()
    await board_with_order.get_cargo_photo(callback.data.replace('get_photo_', ''))


@all_role_router.callback_query(F.data.startswith('con_dev_'))
@customer_router.callback_query(F.data.startswith('con_dev_'))
async def confirm_cargo_delivery_from_customer(callback: CallbackQuery, state: FSMContext):
    """–ó–¥–µ—Å—å –∑–∞–∫–∞–∑—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–∑–∞"""
    if callback.data == 'con_dev_yes':
        confirming_order_id = (await state.get_data())['confirming_order_id']
        await board_with_order.close_order_successfully(confirming_order_id)
        await callback.answer()
        await callback.message.answer('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç!')
    elif callback.data == 'con_dev_no':
        await callback.message.delete()
    else:
        await callback.answer()
        await state.set_data({'confirming_order_id': callback.data.replace('con_dev_', '')})
        await callback.message.answer(text='<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã</b>‚ùì', reply_markup=confirm_delivery_yes_no)


@all_role_router.message(F.text == 'üìÇ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤')
async def choice_history(msg: Message):
    """–£ –¥–≤–æ–π–Ω–æ–π —Ä–æ–ª–∏ –¥–≤–µ –∏—Å—Ç–æ—Ä–∏–∏"""
    await msg.answer(text='–ö–∞–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫–∞–∑–∞—Ç—å?', reply_markup=history_choice)


@all_role_router.message(F.text == 'üì¶ –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤')
@customer_router.message(F.text == 'üìÇ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤')
async def view_orders_history(msg: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫—É –≤—Å–µ –µ–≥–æ –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã"""
    await state.set_data({'': ''})  # –ó–∞–≥–ª—É—à–∫–∞, —á—Ç–æ –±—ã –∑–∞–¥–∞—Ç—å data
    orders_history_list = await bot_base.get_customer_orders_history(msg.from_user.id)
    if len(orders_history_list) > 0:
        for elem in orders_history_list:
            close_order = OrderContainer(
                order_num=elem[0],
                container_id=elem[1],
                customer_id=elem[2],
                executor_id=elem[3],
                point_of_departure=elem[4],
                point_of_delivery=elem[5],
                parcel_contents=elem[6],
                time_delivery=elem[7],
                price=elem[8],
                contacts=elem[9],
                status=elem[10],
                cargo_photo=elem[11],
                need_photo=True if elem[11] != 'no_photo' else False
            )
            await state.update_data({elem[1]: (elem[11], elem[6])})
            await msg.answer(text=close_order.get_info_for_owner_and_executor(),
                             reply_markup=get_photo_history(elem[1]) if elem[11] != 'no_photo' else None)
    else:
        await msg.answer('–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞!')
    if msg.from_user.id in roles_dict['all_roles']:
        await all_main_menu(msg)


@all_role_router.callback_query(F.data.startswith('history_photo_'))
@customer_router.callback_query(F.data.startswith('history_photo_'))
async def get_history_photo(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    await callback.answer()
    photo = (await state.get_data())[callback.data.replace('history_photo_', '')]
    await callback.message.answer_photo(
        photo=photo[0],
        caption=f'–§–æ—Ç–æ –∑–∞–∫–∞–∑–∞ <b><i>{photo[1]}</i></b>'
    )


@all_role_router.message(F.text == '‚õî –û—Ç–º–µ–Ω–∞')
@customer_router.message(F.text == '‚õî –û—Ç–º–µ–Ω–∞')
async def cancel_crating_order(msg: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ"""
    if msg.from_user.id in roles_dict['customer']:
        await cust_main_menu(msg=msg)
    else:
        await all_main_menu(msg)
    await state.clear()
