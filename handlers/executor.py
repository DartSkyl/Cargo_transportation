from loader import roles_dict, bot_base
from keyboards import (main_executor, take_order, confirm_order_taking,
                       taken_order, confirm_a_cancel_taken_order, confirm_cargo_photo, get_photo_history)
from utils.routers_for_roles import executor_router, all_role_router
from utils.order_board import board_with_order
from utils.order_container import OrderContainer
from states import TakenOrder
from .all_roles import all_main_menu

from aiogram.types import Message, CallbackQuery
from aiogram import F
from aiogram.fsm.context import FSMContext


async def ex_main_menu(msg: Message):
    await msg.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=main_executor)


@all_role_router.message(F.text == 'üîé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã')
@executor_router.message(F.text == 'üîé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã')
async def view_available_orders(msg: Message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    available_orders = await board_with_order.get_available_orders(msg.from_user.id)
    if len(available_orders) > 0:
        await msg.answer('<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>')
        for order in available_orders:
            await msg.answer(text=order.get_info_for_orders_board(),
                             reply_markup=take_order(order.get_order_id()))
    else:
        await msg.answer('–î–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç!')


@all_role_router.callback_query(F.data.startswith('take_'))
@executor_router.callback_query(F.data.startswith('take_'))
async def take_the_order(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–∫–∞–∑—á–∏–∫ –±–µ—Ä–µ—Ç –∑–∞–∫–∞–∑, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—è —Å–≤–æ–π –≤—ã–±–æ—Ä –∏–ª–∏ –Ω–µ—Ç"""
    if callback.data == 'take_yes':
        try:
            order_id = (await state.get_data())['take_order_id']
            await board_with_order.appoint_an_executor(order_id=order_id, executor_id=callback.from_user.id)
            await callback.message.answer('<b>–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º '
                                          '–ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤ –∑–∞–∫–∞–∑–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º!')
            await callback.message.delete()
            order = await board_with_order.get_order_by_id(order_id)
            order_status = order.get_order_status()  # –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ, –µ—Å–ª–∏ –≥—Ä—É–∑ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω
            await callback.message.answer(text=order.get_info_for_owner_and_executor(),
                                          # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç —Ä–∞–∑–Ω–æ–π
                                          reply_markup=taken_order(order_id=order.get_order_id(), status=order_status))
        except ValueError:
            await callback.message.delete()
            await callback.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º!')

    elif callback.data == 'take_no':
        order_id = (await state.get_data())['take_order_id']
        order = await board_with_order.get_order_by_id(order_id)
        await callback.message.edit_text(text=order.get_info_for_owner_and_executor(),
                                         reply_markup=take_order(order_id))

    else:
        await state.set_data({'take_order_id': callback.data.replace('take_', '')})
        await callback.message.edit_text(text='<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∑—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞</b>‚ùó',
                                         reply_markup=confirm_order_taking)


@all_role_router.message(F.text == 'üì® –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤')
@executor_router.message(F.text == 'üìÇ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤')
async def show_executors_history(msg: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    await state.set_data({'': ''})  # –ó–∞–≥–ª—É—à–∫–∞, —á—Ç–æ –±—ã –∑–∞–¥–∞—Ç—å data
    orders_history_list = await bot_base.get_executor_orders_history(msg.from_user.id)
    if len(orders_history_list) > 0:
        for elem in orders_history_list:
            close_order = OrderContainer(
                order_num=elem[0],
                container_id=elem[1],
                customer_id=elem[2],
                executor_id=elem[3],
                point_of_departure=elem[4],
                point_of_delivery=elem[5],
                parcel_contents=elem[6],
                time_delivery=elem[7],
                price=elem[8],
                contacts=elem[9],
                status=elem[10],
                cargo_photo=elem[11]
            )
            await state.update_data({elem[1]: (elem[11], elem[6])})
            await msg.answer(text=close_order.get_info_for_owner_and_executor(),
                             reply_markup=get_photo_history(elem[1]))
    else:
        await msg.answer('–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞!')

    if msg.from_user.id in roles_dict['all_roles']:
        await all_main_menu(msg)


@all_role_router.message(F.text == 'üöõ –ú–æ–∏ –≤–∑—è—Ç—ã–µ –∑–∞–∫–∞–∑—ã')
@executor_router.message(F.text == 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã')
async def view_a_orders_in_execute(msg: Message):
    """–í—ã–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤–∑—è—Ç—ã—Ö –≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"""
    taken_orders = await board_with_order.get_orders_in_execute(msg.from_user.id)
    if len(taken_orders) > 0:
        for order in taken_orders:
            order_status = order.get_order_status()  # –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ, –µ—Å–ª–∏ –≥—Ä—É–∑ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω
            await msg.answer(text=order.get_info_for_owner_and_executor(),
                             # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç —Ä–∞–∑–Ω–æ–π
                             reply_markup=taken_order(order_id=order.get_order_id(), status=order_status))
    else:
        await msg.answer('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É!')


@all_role_router.callback_query(F.data.startswith('cargo_taken_'))
@executor_router.callback_query(F.data.startswith('cargo_taken_'))
async def executor_taken_cargo(callback: CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –ø—Ä–∏–µ—Ö–∞–ª –≤ –ø—É–Ω–∫—Ç –æ—Ç–≥—Ä—É–∑–∫–∏.
    –ü–æ—Å–ª–µ —á–µ–≥–æ –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–∫–∏–Ω—É—Ç—å —Ñ–æ—Ç–æ –≥—Ä—É–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –µ–º—É –ø–µ—Ä–µ–¥–∞–ª–∏"""
    await state.set_data({'taken_order_id': callback.data.replace('cargo_taken_', '')})
    await callback.message.delete()
    await callback.message.answer('–°–∫–∏–Ω—å—Ç–µ —Ñ–æ—Ç–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤–∏–¥–Ω–æ –≤–µ—Å—å –≥—Ä—É–∑!')
    await state.set_state(TakenOrder.add_photo)


@all_role_router.message(TakenOrder.add_photo)
@executor_router.message(TakenOrder.add_photo)
async def catch_executor_photo(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    if msg.photo:
        await state.update_data({'cargo_photo': msg.photo[-1].file_id})
        await msg.answer(text='–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ì—Ä—É–∑ –ø–æ–ª—É—á–µ–Ω" –∏–ª–∏ —Å–∫–∏–Ω—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ.\n'
                              '<b>–ó–∞–∫–∞–∑—á–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –≤—ã —Å–∫–∏–Ω—É–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º‚ùó</b>',
                         reply_markup=confirm_cargo_photo)


@all_role_router.callback_query(TakenOrder.add_photo, F.data.startswith('add_photo_yes'))
@executor_router.callback_query(TakenOrder.add_photo, F.data.startswith('add_photo_yes'))
async def confirm_executor_photo(callback: CallbackQuery, state: FSMContext):
    """–ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ –≥—Ä—É–∑ –ø–æ–ª—É—á–µ–Ω"""
    await callback.answer()
    if callback.data == 'add_photo_yes':
        order = await state.get_data()
        await board_with_order.executor_taken_cargo(
            cargo_photo=order['cargo_photo'],
            order_id=order['taken_order_id']
        )
        await callback.message.answer('–ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –≥—Ä—É–∑')
        order = await board_with_order.get_order_by_id(order['taken_order_id'])
        order_status = order.get_order_status()  # –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ, –µ—Å–ª–∏ –≥—Ä—É–∑ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω
        await callback.message.answer(text=order.get_info_for_owner_and_executor(),
                                      # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç —Ä–∞–∑–Ω–æ–π
                                      reply_markup=taken_order(order_id=order.get_order_id(), status=order_status))
        await state.clear()
    elif callback.data == 'add_photo_no':

        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏, –Ω–∞–ø—Ä–∞–≤–∏–º —é–∑–µ—Ä–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if callback.from_user.id in roles_dict['executor']:
            await ex_main_menu(callback.message)
        else:
            await all_main_menu(callback.message)
        await state.clear()


@all_role_router.callback_query(F.data.startswith('cancel_'))
@executor_router.callback_query(F.data.startswith('cancel_'))
async def cancel_taken_order(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã"""
    if callback.data == 'cancel_yes':
        cancel_order_id = (await state.get_data())['cancel_order_id']
        await board_with_order.cancel_order_at_executor(
            order_id=cancel_order_id,
            executor_id=callback.from_user.id
        )
        await callback.message.delete()
        await callback.message.answer(text='–ó–∞–∫–∞–∑ —Å–Ω—è—Ç —Å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è!')

    elif callback.data == 'cancel_no':
        cancel_order_id = (await state.get_data())['cancel_order_id']
        order = await board_with_order.get_order_by_id(cancel_order_id)
        await callback.message.edit_text(text=order.get_info_for_owner_and_executor(),
                                         reply_markup=taken_order(
                                             order_id=cancel_order_id,
                                             status=order.get_order_status()
                                         ))

    else:
        await state.set_data({'cancel_order_id': callback.data.replace('cancel_', '')})
        await callback.message.edit_text(text='<b>–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑, –≤—ã —É–≤–µ—Ä–µ–Ω—ã‚ùì</b>',
                                         reply_markup=confirm_a_cancel_taken_order)


@all_role_router.callback_query(F.data.startswith('cargo_delivered_'))
@executor_router.callback_query(F.data.startswith('cargo_delivered_'))
async def executor_delivered_cargo(callback: CallbackQuery):
    """–ó–¥–µ—Å—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–æ–æ–±—â–∞–µ—Ç –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –≤ –ø—É–Ω–∫—Ç –¥–æ—Å—Ç–∞–≤–∫–∏"""
    await callback.answer()
    delivered_order_id = callback.data.replace('cargo_delivered_', '')
    await board_with_order.cargo_delivered(delivered_order_id)
    await callback.message.answer('<b><i>–ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–ª—É—á–∏–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n'
                                  '–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∑–∞–∫–∞–∑—á–∏–∫–∞</i></b>‚ùó')


@executor_router.callback_query(F.data.startswith('history_photo_'))
async def get_history_photo_for_executor(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    await callback.answer()
    photo = (await state.get_data())[callback.data.replace('history_photo_', '')]
    await callback.message.answer_photo(
        photo=photo[0],
        caption=f'–§–æ—Ç–æ –∑–∞–∫–∞–∑–∞ <b><i>{photo[1]}</i></b>'
    )


@executor_router.message(F.text == '‚õî –û—Ç–º–µ–Ω–∞')
async def cancel_func(msg: Message, state: FSMContext):
    await ex_main_menu(msg=msg)
    await state.clear()
