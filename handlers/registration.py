from loader import dp, bot_base, roles_dict
from keyboards import role_choice, confirm_choice
from states import Registration
from utils.admin_router import admin_router
from .customer import cust_main_menu
from .all_roles import all_main_menu
from .executor import ex_main_menu

from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram import F, html
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext


roles = {
        'executor': ('–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', ex_main_menu),
        'customer': ('–ó–∞–∫–∞–∑—á–∏–∫', cust_main_menu),
        'all_roles': ('–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å + –ó–∞–∫–∞–∑—á–∏–∫', all_main_menu)
    }


@dp.message(Command('start'))
async def greetings(msg: Message, state: FSMContext):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ª–∏–±–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–æ–ª–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"""
    # –°–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –∏–ª–∏ –Ω–µ—Ç
    is_user = await bot_base.check_user(user_id=msg.from_user.id)
    if not is_user:
        await msg.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–æ–∫!\n'
                         '–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:', reply_markup=role_choice)
        await state.set_state(Registration.role_choice)
    else:
        await msg.answer(text=f'–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞, <b>{html.quote(msg.from_user.first_name)}</b>!üòâ')
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏ –ø–æ —Å–ª–æ–≤–∞—Ä—é
        await roles[is_user[1]][1](msg=msg)
        await state.clear()


@dp.callback_query(Registration.role_choice, F.data.startswith('r_'))
async def catch_user_role(callback: CallbackQuery, state: FSMContext):
    """–õ–æ–≤–∏–º —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–ª —é–∑–µ—Ä –∏ –æ–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""

    await callback.answer()

    # –°–æ—Ö—Ä–∞–Ω–∏–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_data({'user_role': callback.data.replace('r_', '')})
    await callback.message.delete()
    await callback.message.answer(text=f'–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–æ–ª—å: <b>{roles[callback.data.replace("r_", "")][0]}</b>\n'
                                       f'–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=confirm_choice)
    await state.set_state(Registration.confirm_choice)


@dp.callback_query(Registration.confirm_choice)
async def confirm_user_choice(callback: CallbackQuery, state: FSMContext):
    """–ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–≤–æ–π –≤—ã–±–æ—Ä, –ª–∏–±–æ –Ω–µ—Ç"""
    await callback.answer()
    if callback.data == 'confirm':
        user_role = (await state.get_data())['user_role']  # –î–æ—Å—Ç–∞–µ–º –∑–∞—Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot_base.registration_new_user(
            user_id=callback.from_user.id,
            role=user_role
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ –∫–ª—é—á—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏
        roles_dict[user_role].append(callback.from_user.id)
        await callback.message.answer(text='–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏ –ø–æ —Å–ª–æ–≤–∞—Ä—é
        await roles[user_role][1](msg=callback.message)
        await state.clear()
    else:
        await callback.message.answer(text='–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:', reply_markup=role_choice)
        await state.set_state(Registration.role_choice)


@admin_router.message(Command('get_log'))
async def get_bot_log(msg: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –≤—ã–≥—Ä—É–∂–∞–µ—Ç –≤ —á–∞—Ç —Ñ–∞–π–ª —Å –ª–æ–≥–æ–º –±–æ—Ç–∞"""
    log_file = FSInputFile('bot.log')
    await msg.answer_document(document=log_file)
